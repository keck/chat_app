
2/2 - read the email, started thinking.
2/3 - started this log.

Thoughts about tech:
 - as suggested, node.js seems like a good place to start.

   - plus
    a) you use it
    b) I've never used it
    c) event driven nature aligns well with chat

   - minus
    a) you use it
    b) I've never used it

 - Other candidates:
    * Just do it all in perl/ruby/python etc
        - REST api not tough to do but could be done with way less effort
    * Java - tomcat, jax-ws
        - would be pretty quick to set up but I'd learn nothing new
    * Mojolicio.us => actually I am having trouble finding a downside to this

So then.  After some quick research, I'm going to start out with:

   node.js
 + socket.io for websockets
 + express for static client and REST api,

and see how far that gets me.  I should be able to make a real basic client
using express too, and then maybe implement another client with the same
protocol if I've got time.

Restify looks cool too, if I ever didn't want all the other templating crap
that comes with express.  Seems more useful for building a more independantly
defined API.

Afterward I might do it in mojo just because.

Thoughts about things to consider/address that I may or may not have time for in the demo:
 - documentation
 - security
 - persistent configuration
 - message history (so you can see previous n msgs in channel when you join it
 - differentiated authorization levels (+o, +v, etc)
 - better dev environment + documented to encourage collaboration
 - CI/CD automation
 - service reliability
 - monitoring

Jotting down some quick thoughts about verbs + nouns for client<->serverAPI

Nouns:
 - client
 - server
 - message
 - channel

Client Verbs:
 - connect
 - disconnect
 - nick
 - say (channel?, message)
 - join (channel)
 - part (channel)
 - msg (client, message)

Server Verbs:
 - join (channel, client)
 - part (channel, client)
 - list (channel) // list users in channel
 - list ()  // list channels
 
* Installed npm on debian-based host.
* Installed socket.io + express
* node.js hello world
* express.js hello world
* socket.io usage

* node.js based chat - plan to throwaway

2/5
Update:
 hey, neat - discovered express.io, a superset of express + socket.io.  Supports broadcasting.  sweet!

* re-do node chat with express.io
  * Started messing with examples at https://github.com/techpines/express.io/tree/master/examples#routing

  * Hey, great - the messages provided for the client are /already/ JSON

2/6
At this point I've experimented with something that will accomplish each of the
pieces, so it's time to start putting them together.

2/15
Ok, took a big break from this to a) read 'eloquent javascript', and b) take
care of the rest of life

Picking this back up, I'm going through a more detailed express app, that
includes use of jade for templating, because my front end design skills are
crap.

Worked on the code in express_chat/, and somewhat got it working.  On to the
next stage .. rolling something more my-own than copy-pasta.

Other thoughts  -  for 'peer to peer' requirement .. websockets seem ill-suited for this.
Google-engineering reveals
 - WebRTC http://www.webrtc.org
 - https://github.com/webrtc/samples

 and libs implementing it, like p:
 - http://ozan.io/p/  Not sure if I'll get time to incorporate it.

2/16
  apropos: https://twitter.com/garybernhardt/status/566038610655576064

  also found this curiosity: http://websocketd.com/
  might be great for quick prototyping..

2/18
  continuing implementation
  re-implemented all existing crap in express.io

